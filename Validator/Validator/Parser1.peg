@namespace Validator
@classname PegPL1Parser
@using System.Linq;
@using Validator
@accessibility internal
@members
{
	private List<Argument> BuildArguments(List<Argument> list, Argument argument)
	{
		list.Add(argument);
		return list;
	}

	private List<Formula> BuildGenericFormula(Formula formula, Formula argument)
	{
		List<Formula> result = new	List<Formula>();
		return new List<Formula> { argument, formula };
	}
}

//Entry point: Formula
formula <Formula>	= conjunction / disjunction / singleAtom

//Conjunction
conjunction <Formula> = atom:atom conjunctionSymbol conjunctionPart:conjunctionPart { new Conjunction(BuildGenericFormula(conjunctionPart,atom), "Conjunction", "Conjunction") }

conjunctionPart <Formula>	= atom:atom conjunctionSymbol conjunctionPart:conjunctionPart { new Conjunction(BuildGenericFormula(conjunctionPart,atom), "Conjunction", "Conjunction") }
							/ singleAtom 
							/ formula

//Disjunction
disjunction <Formula> = atom:atom disjunctionSymbol disjunctionPart:disjunctionPart { new Disjunction(BuildGenericFormula(disjunctionPart,atom), "Disjunction", "Disjunction") }

disjunctionPart <Formula>	= atom:atom disjunctionSymbol disjunctionPart:disjunctionPart { new Disjunction(BuildGenericFormula(disjunctionPart,atom), "Disjunction", "Disjunction") }
							/ singleAtom
							/ formula

//Atom
atom <Formula> = n:string openedBracket argument:argument closedBracked { new Predicate(argument, n,n) }

//Single Atom
singleAtom <Formula> = n:string openedBracket argument:argument closedBracked !.+ { new Predicate(argument, n,n) }

//Arguments
argument <List<Argument>> -memoize	= argument:argument argumentDelimiter constant:constant  { BuildArguments(argument, constant)}
									/ constant:constant { new List<Argument> { constant }}

constant <Constant> = constant:string { new Constant(constant,constant) }

string = "" ([a-z]i)*

openedBracket = " "* "(" " "*
closedBracked = " "* ")" " "*
conjunctionSymbol = " "* "\u2227" " "*
disjunctionSymbol = " "* "\u2228" " "*
argumentDelimiter = " "* "," " "*
